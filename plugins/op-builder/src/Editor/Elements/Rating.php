<?php

namespace OPBuilder\Editor\Elements;

class Rating extends OPElement implements OPElementInterface
{

    /**
     * This element uses no markup. The markup is
     * generated by JS library, so we need to
     * rewrite it's logic to PHP.
     *
     * @param  string $html
     * @return string
     */
    public function afterRender($html)
    {
        if ($this->options->all->ratingSvgPattern === null)
            // old deprecated element
            return '';

        $html = preg_replace('/<svg><\/svg>/', $this->jsGetHtml(), $html);
        $html = $this->fixIe($html);

        return $html;
    }

    /**
     * Get all element options
     *
     * @return array
     */
    private function jsGetOptions()
    {
        return [
            'idSuffix'            => '-' . $this->uuid,
            'patternUrl'          => op3_asset('/img/elements/rating/rating-svg.svg'),
            'patternId'           => isset($this->options->all->ratingSvgPattern)             ? reset($this->options->all->ratingSvgPattern)             : 'star',
            'count'               => isset($this->options->all->ratingSvgCount)               ? reset($this->options->all->ratingSvgCount)               : '5',
            'rate'                => isset($this->options->all->ratingSvgRate)                ? reset($this->options->all->ratingSvgRate)                : '2.5',
            'offset'              => isset($this->options->all->ratingSvgOffset)              ? reset($this->options->all->ratingSvgOffset)              : '0',
            'fillColor'           => isset($this->options->all->ratingSvgFillColor)           ? reset($this->options->all->ratingSvgFillColor)           : '#ff0',
            'fillColor2'          => isset($this->options->all->ratingSvgFillColor2)          ? reset($this->options->all->ratingSvgFillColor2)          : '#eee',
            'strokeColor'         => isset($this->options->all->ratingSvgStrokeColor)         ? reset($this->options->all->ratingSvgStrokeColor)         : '#ffa500',
            'strokeWidth'         => isset($this->options->all->ratingSvgStrokeWidth)         ? reset($this->options->all->ratingSvgStrokeWidth)         : '2',
            'preserveAspectRatio' => isset($this->options->all->ratingSvgPreserveAspectRatio) ? reset($this->options->all->ratingSvgPreserveAspectRatio) : 'xMidYMid meet',
        ];
    }

    /**
     * Get SVG nodes position/size
     * from options/config
     * (from _getRect@rating-svg.js)
     *
     * @return array
     */
    private function jsGetRect()
    {
        $option = $this->jsGetOptions();
        $padding = 0;
        $offset = $option['offset'];
        $count = $option['count'];
        $rate = $option['rate'];
        $strokeWidth = $option['strokeWidth'];
        $strokeHalf = $strokeWidth/2;
        $baseWidth = 32;
        $paddingValue = 3;
        $paddingReal = $padding * $paddingValue;
        $offsetValue = 3;
        $offsetReal = $offset * $offsetValue;
        $parentWidth = ($paddingReal + $strokeWidth + $baseWidth)*$count + $offsetReal*($count - 1) + $paddingReal;
        $parentHeight = $paddingReal + $strokeWidth + $baseWidth + $paddingReal;
        $patternXY = $paddingReal + $strokeHalf;
        $patternWidth = $paddingReal + $strokeWidth + $baseWidth + $offsetReal;
        $filledWidth = ($strokeWidth + $baseWidth)*$rate + ceil($rate)*$paddingReal + floor($rate)*$offsetReal;
        $emptyWidth = max(0, $parentWidth - $filledWidth);

        return array(
            'parentLeft' => 0,
            'parentTop' => 0,
            'parentWidth' => $parentWidth,
            'parentHeight' => $parentHeight,
            'patternBaseLeft' => $patternXY,
            'patternBaseTop' => $patternXY,
            'patternBaseWidth' => null,
            'patternBaseHeight' => null,
            'patternFilledLeft' => null,
            'patternFilledTop' => null,
            'patternFilledWidth' => $patternWidth,
            'patternFilledHeight' => $parentHeight,
            'patternEmptyLeft' => null,
            'patternEmptyTop' => null,
            'patternEmptyWidth' => $patternWidth,
            'patternEmptyHeight' => $parentHeight,
            'canvasFilledLeft' => 0,
            'canvasFilledTop' => 0,
            'canvasFilledWidth' => $filledWidth,
            'canvasFilledHeight' => $parentHeight,
            'canvasEmptyLeft' => $filledWidth,
            'canvasEmptyTop' => 0,
            'canvasEmptyWidth' => $emptyWidth,
            'canvasEmptyHeight' => $parentHeight,
        );
    }

    /**
     * Get SVG template
     * (from html@rating-svg.js)
     *
     * @return string
     */
    private function jsGetHtml()
    {
        $rect = $this->jsGetRect();
        $option = $this->jsGetOptions();

        $result = ''
            .   '<svg class="rating-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{{rect.parentWidth}}" height="{{rect.parentHeight}}" viewBox="{{rect.parentLeft}} {{rect.parentTop}} {{rect.parentWidth}} {{rect.parentHeight}}" preserveAspectRatio="{{option.preserveAspectRatio}}">'
            .   '<defs>'
            .   '<use id="pattern-base{{option.idSuffix}}" xlink:href="{{option.patternUrl}}#{{option.patternId}}" x="{{rect.patternBaseLeft}}" y="{{rect.patternBaseTop}}" stroke="{{option.strokeColor}}" stroke-width="{{option.strokeWidth}}" />'
            .   '<pattern id="pattern-filled{{option.idSuffix}}" width="{{rect.patternFilledWidth}}" height="{{rect.patternFilledHeight}}" patternUnits="userSpaceOnUse">'
            .   '<use xlink:href="#pattern-base{{option.idSuffix}}" fill="{{option.fillColor}}" />'
            .   '</pattern>'
            .   '<pattern id="pattern-empty{{option.idSuffix}}" width="{{rect.patternEmptyWidth}}" height="{{rect.patternEmptyHeight}}" patternUnits="userSpaceOnUse">'
            .   '<use xlink:href="#pattern-base{{option.idSuffix}}" fill="{{option.fillColor2}}" />'
            .   '</pattern>'
            .   '</defs>'
            .   '<rect id="canvas-filled{{option.idSuffix}}" x="{{rect.canvasFilledLeft}}" y="{{rect.canvasFilledTop}}" width="{{rect.canvasFilledWidth}}" height="{{rect.canvasFilledHeight}}" fill="url(#pattern-filled{{option.idSuffix}})" />'
            .   '<rect id="canvas-empty{{option.idSuffix}}" x="{{rect.canvasEmptyLeft}}" y="{{rect.canvasEmptyTop}}" width="{{rect.canvasEmptyWidth}}" height="{{rect.canvasEmptyHeight}}" fill="url(#pattern-empty{{option.idSuffix}})" />'
            .   '</svg>';

        $result = preg_replace_callback(
            '/{{rect\.(.*?)}}/',
            function($matches) use ($rect) {
                return $rect[$matches[1]];
            },
            $result
        );
        $result = preg_replace_callback(
            '/{{option\.(.*?)}}/',
            function($matches) use ($option) {
                return $option[$matches[1]];
            },
            $result
        );

        return $result;
    }

    /**
     * The external source on use element is not
     * working on Internet Explorer, so we must
     * do some regular expression replace while
     * rendering element (frontend only).
     *
     * @param  string $html
     * @return string
     */
    private function fixIe($html)
    {
        if ( ! op3_is_admin()) {
            $suffix = '-extsrcfix-' . $this->uuid;
            $cache = array();

            // replace <use> tags that have href (or xlink:href)
            // attribute with external source: find external
            // source file, read it and do some replacements
            $html = preg_replace_callback(
                '/<(use[^>]*href=")(.*?)("[^>]*)>/',
                function($matches) use ($cache, $suffix) {
                    $href = $matches[2];
                    $arr = explode('#', $href, 2);
                    if (count($arr) !== 2 || !$arr[0] || !$arr[1]) {
                        return $matches[0];
                    }

                    $url = $arr[0];
                    $id = $arr[1];

                    // read file content and store it to $cache
                    if (!isset($cache[$url])) {
                        $filename = str_replace(op3_asset(), '', $url);
                        $filename = op3_asset_path($filename);
                        $content = @file_get_contents($filename);

                        $cache[$url] = $content;
                    }

                    // aleready appended
                    if (!$cache[$url]) {
                        return $matches[0];
                    }

                    // find element by id
                    $re = '/<(\w*)([^>]*\sid=")(' . preg_quote($id) . ')("[^>]*)>/';
                    preg_match($re, $cache[$url], $element);
                    if (!count($element))
                        return $matches[0];

                    // flag 'already appended'
                    // (we can have multiple use tags with same href
                    // and we need to append it only once)
                    $cache[$url] = '';

                    // append element before current <use>
                    // (with suffix)
                    return ''
                        . '<'
                        . $element[1]
                        . $element[2]
                        . $element[3] . $suffix
                        . $element[4]
                        . '>'
                        . '</'
                        . $element[1]
                        . '>'
                        . '<'
                        . $matches[1]
                        . '#' . $id . $suffix
                        . $matches[3]
                        . '>';
                },
                $html
            );
        }

        return $html;
    }

}
